CREATE TABLE IF NOT EXISTS "ticket" (
    "id"        BIGINT NOT NULL PRIMARY KEY,
    "owner_id"  BIGINT NOT NULL,
    "event_id"  BIGINT NOT NULL,
    "payed"     BIGINT NOT NULL CHECK(payed > 0) 
);

CREATE TABLE IF NOT EXISTS "event_artist" (
    "id"        BIGINT NOT NULL PRIMARY KEY,
    "event_id"  BIGINT NOT NULL,
    "artist_id" BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS "artist" (
    "id"        BIGINT NOT NULL PRIMARY KEY,
    "name"      VARCHAR(255) NOT NULL CHECK(LENGTH(TRIM(name)) >= 3)
);

CREATE TABLE IF NOT EXISTS "event" (
    "id"            BIGINT NOT NULL PRIMARY KEY,
    "name"          VARCHAR(255) NOT NULL CHECK(LENGTH(TRIM(name)) >= 3),
    "start_date"    DATE NOT NULL,
    "end_date"      DATE NOT NULL,
    "seats"         BIGINT NOT NULL CHECK(seats > 0), 
    "location_id"   BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS "user" (
    "id"        BIGINT NOT NULL PRIMARY KEY,
    "name"      VARCHAR(255) NOT NULL CHECK(LENGTH(TRIM(name)) >= 3),
    "email"     VARCHAR(255) NOT NULL UNIQUE CHECK(LENGTH(TRIM(email)) >= 3),
    "birthdate" DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS "location" (
    "id"          BIGINT NOT NULL PRIMARY KEY,
    "name"        VARCHAR(255) NOT NULL CHECK(LENGTH(TRIM(name)) >= 1),
    "seats"       BIGINT NOT NULL CHECK(seats > 0),
    "coordinates" GEOGRAPHY(Point, 4326)
);


-- foregin keys
ALTER TABLE
    "event" ADD CONSTRAINT "event_location_id_foreign" FOREIGN KEY("location_id") REFERENCES "location"("id");
ALTER TABLE
    "ticket" ADD CONSTRAINT "ticket_owner_id_foreign" FOREIGN KEY("owner_id") REFERENCES "user"("id");
ALTER TABLE
    "ticket" ADD CONSTRAINT "ticket_event_id_foreign" FOREIGN KEY("event_id") REFERENCES "event"("id");
ALTER TABLE
    "event_artist" ADD CONSTRAINT "event_artist_artist_id_foreign" FOREIGN KEY("artist_id") REFERENCES "artist"("id");
ALTER TABLE
    "event_artist" ADD CONSTRAINT "event_artist_event_id_foreign" FOREIGN KEY("event_id") REFERENCES "event"("id");


ALTER TABLE "event" ADD CONSTRAINT "start_date_before_end_date" CHECK (start_date <= end_date);

-- triggers

CREATE OR REPLACE FUNCTION check_event_seats_less_than_location_seats()
RETURNS TRIGGER AS $$
DECLARE
    max_seats BIGINT;
BEGIN
    SELECT seats INTO max_seats FROM "location" WHERE id=NEW.id;
    RAISE NOTICE 'max_seats is currently %', max_seats;
    RAISE NOTICE 'seats is currently %', NEW.seats;
    IF NEW.seats > max_seats THEN
        RAISE EXCEPTION 'not enough seats';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_event_seats BEFORE INSERT ON "event" FOR EACH ROW EXECUTE FUNCTION check_event_seats_less_than_location_seats();




